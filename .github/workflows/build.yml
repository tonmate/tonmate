name: Build Docker Images

on:
  push:
    branches: [ main, staging ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main, staging ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  pre-release:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Get version from package.json
        id: version
        run: |
          VERSION=$(grep '"version":' package.json | sed -E 's/.*"version": *"([^"]+).*/\1/')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

  build:
    runs-on: ubuntu-latest
    needs: [pre-release]
    if: always() && (needs.pre-release.result == 'success' || needs.pre-release.result == 'skipped')
    
    env:
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
      NEXTAUTH_URL: ${{ vars.NEXTAUTH_URL }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      ENCRYPTION_KEY: ${{ secrets.ENCRYPTION_KEY }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set environment and tag
        id: meta
        run: |
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            # Git tag release
            TARGET_ENV=production
            TAG=${GITHUB_REF#refs/tags/}
            echo "Building release: $TAG"
          elif [ "${{ github.ref }}" == "refs/heads/main" ]; then
            # Main branch
            TARGET_ENV=production
            TAG=latest
            echo "Building main branch: latest"
          elif [ "${{ github.ref }}" == "refs/heads/staging" ]; then
            # Staging branch
            TARGET_ENV=staging
            TAG=staging
            echo "Building staging branch: staging"
          else
            # Other branches (PRs)
            TARGET_ENV=development
            TAG=dev-${{ github.sha }}
            echo "Building development: $TAG"
          fi
          echo "target_env=$TARGET_ENV" >> $GITHUB_OUTPUT
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "Target Environment: $TARGET_ENV"
          echo "Tag: $TAG"
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.tag }}
            ${{ steps.meta.outputs.target_env == 'production' && format('{0}/{1}:latest', env.REGISTRY, env.IMAGE_NAME) || '' }}
          build-args: |
            SENTRY_AUTH_TOKEN=${{ secrets.SENTRY_AUTH_TOKEN }}
            targetEnvironment=${{ steps.meta.outputs.target_env }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Clean up old images
        run: |
          docker system prune -f --filter "until=24h"
