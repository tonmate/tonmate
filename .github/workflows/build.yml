name: Reusable Build Workflow

on:
  workflow_call:
    inputs:
      registry:
        required: false
        type: string
        default: "ghcr.io"
      dockerfile-path:
        required: false
        type: string
        default: "docker/Dockerfile"
      image-name:
        required: true
        type: string
      node-version:
        required: false
        type: string
        default: "20"
    secrets:
      GH_TOKEN:
        required: true
    outputs:
      new_release_published:
        description: "Whether a new release was published"
        value: ${{ jobs.build.outputs.new_release_published }}
      new_release_version:
        description: "The new release version"
        value: ${{ jobs.build.outputs.new_release_version }}
      docker_tags:
        description: "The Docker tags that were created"
        value: ${{ jobs.build.outputs.docker_tags }}

jobs:
  build:
    name: Build and Push
    runs-on: ubuntu-latest
    outputs:
      new_release_published: ${{ steps.semantic.outputs.new_release_published }}
      new_release_version: ${{ steps.semantic.outputs.new_release_version }}
      docker_tags: ${{ steps.vars.outputs.tags }}
    permissions:
      contents: write
      packages: write
      id-token: write
      issues: write
      pull-requests: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ inputs.registry }}
          username: ${{ github.actor }}
          password: ${{ secrets.GH_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ inputs.registry }}/${{ inputs.image-name }}

      - name: Semantic Release
        id: semantic
        run: |
          npx semantic-release
          if git tag --sort=-version:refname | head -n 1 | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' > /dev/null; then
            echo "new_release_published=true" >> $GITHUB_OUTPUT
            echo "new_release_version=$(git tag --sort=-version:refname | head -n 1)" >> $GITHUB_OUTPUT
          else
            echo "new_release_published=false" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          DEBUG: semantic-release:*

      - name: Determine Docker tags
        id: vars
        run: |
          REGISTRY_IMAGE="${{ inputs.registry }}/${{ inputs.image-name }}"
          if [ "${{ steps.semantic.outputs.new_release_published }}" == "true" ]; then
            TARGET_ENV=production
            VERSION="${{ steps.semantic.outputs.new_release_version }}"
            MAJOR=$(echo $VERSION | cut -d. -f1)
            MINOR=$(echo $VERSION | cut -d. -f1-2)
            PATCH=$VERSION
            TAGS="${REGISTRY_IMAGE}:v${VERSION},${REGISTRY_IMAGE}:${PATCH},${REGISTRY_IMAGE}:${MINOR},${REGISTRY_IMAGE}:${MAJOR},${REGISTRY_IMAGE}:latest"
            echo "tags=$TAGS" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" == "refs/heads/main" ]; then
            TARGET_ENV=production
            TAGS="${REGISTRY_IMAGE}:latest,${REGISTRY_IMAGE}:main"
            echo "tags=$TAGS" >> $GITHUB_OUTPUT
          else
            TARGET_ENV=development
            SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
            TAGS="${REGISTRY_IMAGE}:dev-${SHORT_SHA},${REGISTRY_IMAGE}:dev-latest"
            echo "tags=$TAGS" >> $GITHUB_OUTPUT
          fi
          echo "target_env=$TARGET_ENV" >> $GITHUB_OUTPUT
          echo "new_release=${{ steps.semantic.outputs.new_release_published }}" >> $GITHUB_OUTPUT
          echo "version=${{ steps.semantic.outputs.new_release_version }}" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ inputs.dockerfile-path }}
          push: true
          tags: ${{ steps.vars.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ inputs.registry }}/${{ inputs.image-name }}:buildcache
          cache-to: type=registry,ref=${{ inputs.registry }}/${{ inputs.image-name }}:buildcache,mode=max

      - name: Output image details
        run: |
          echo "âœ… Docker image built and pushed!"
          echo "  Image: ${{ inputs.registry }}/${{ inputs.image-name }}"
          echo "  Environment: ${{ steps.vars.outputs.target_env }}"