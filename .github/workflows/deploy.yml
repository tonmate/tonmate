name: Reusable Deploy Workflow

on:
  workflow_call:
    inputs:
      environment:
        required: false
        type: string
        default: "production"
      tag:
        required: false
        type: string
        default: "latest"
      image-name:
        required: true
        type: string
      registry:
        required: false
        type: string
        default: "ghcr.io"
    secrets:
      SSH_PRIVATE_KEY:
        required: true
      SSH_USER:
        required: true
      VPS_HOST:
        required: true
      DATABASE_URL:
        required: true
      NEXTAUTH_SECRET:
        required: true
      JWT_SECRET:
        required: true
      ENCRYPTION_KEY:
        required: true
      OPENAI_API_KEY:
        required: true
      NEXTAUTH_URL:
        required: true
      GH_TOKEN:
        required: true

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install SSH client
        run: sudo apt-get update && sudo apt-get install -y openssh-client

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" | tr -d '\r' > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to VPS
        run: |
          # Determine target environment
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then 
            targetEnvironment=production
          else 
            targetEnvironment=staging
          fi

          # Override with input if provided
          if [ "${{ inputs.environment }}" != "" ]; then
            targetEnvironment=${{ inputs.environment }}
          fi

          JOB_ID=$(date +%s)

          echo "Starting remote deployment on VPS..."

          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.VPS_HOST }} bash -s <<EOF
            set -e
            echo "[✓] Connected to VPS"

            echo "[•] Creating temp directory"
            mkdir -p ~/configs_\$JOB_ID
            cd ~/configs_\$JOB_ID

            echo "[•] Cloning repository..."
            git clone https://github.com/tonmate/tonmate.git

            echo "[•] Navigating to docker directory..."
            cd tonmate/docker

            echo "[•] Writing .env file..."
            cat > .env << 'EOT'
            DATABASE_URL="${{ secrets.DATABASE_URL }}"
            NEXTAUTH_URL="${{ secrets.NEXTAUTH_URL }}"
            NEXTAUTH_SECRET="${{ secrets.NEXTAUTH_SECRET }}"
            JWT_SECRET="${{ secrets.JWT_SECRET }}"
            ENCRYPTION_KEY="${{ secrets.ENCRYPTION_KEY }}"
            OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}"
            NODE_ENV=production
            EOT

            echo "[•] Pulling docker images..."
            docker compose pull

            echo "[•] Restarting service: tonmate-\$targetEnvironment"
            docker compose -f docker-compose.\$targetEnvironment.yml up -d --build --force-recreate tonmate-\$targetEnvironment

            echo "[•] Cleaning up..."
            cd ~ && rm -rf configs_\$JOB_ID

            echo "[✓] Deployment finished successfully!"
