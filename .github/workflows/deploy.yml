name: Reusable Deploy Workflow

on:
  workflow_call:
    inputs:
      environment:
        required: false
        type: string
        default: "production"
      tag:
        required: false
        type: string
        default: "latest"
      image-name:
        required: true
        type: string
      registry:
        required: false
        type: string
        default: "ghcr.io"
    secrets:
      SSH_PRIVATE_KEY:
        required: true
      SSH_USER:
        required: true
      VPS_HOST:
        required: true
      DATABASE_URL:
        required: true
      NEXTAUTH_SECRET:
        required: true
      JWT_SECRET:
        required: true
      ENCRYPTION_KEY:
        required: true
      OPENAI_API_KEY:
        required: true
      NEXTAUTH_URL:
        required: true
      GH_TOKEN:
        required: true

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install SSH client
        run: sudo apt-get update && sudo apt-get install -y openssh-client

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" | tr -d '\r' > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to VPS
        run: |
          # Determine target environment
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then 
            targetEnvironment=production
          else 
            targetEnvironment=staging
          fi

          if [ "${{ inputs.environment }}" != "" ]; then
            targetEnvironment=${{ inputs.environment }}
          fi

          JOB_ID=$(date +%s)
          DEPLOY_DIR=configs_$JOB_ID

          echo "Starting remote deployment on VPS..."

          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.VPS_HOST }} "
            set -e

            echo '[✓] Connected to VPS'

            echo '[•] Creating temp directory'
            mkdir -p ~/$DEPLOY_DIR && cd ~/$DEPLOY_DIR

            echo '[•] Cloning repository...'
            git clone https://github.com/tonmate/tonmate.git

            echo '[•] Navigating to docker directory...'
            cd tonmate/docker

            echo '[•] Writing .env file...'
            echo 'DATABASE_URL=${{ secrets.DATABASE_URL }}' > .env
            echo 'NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL }}' >> .env
            echo 'NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}' >> .env
            echo 'JWT_SECRET=${{ secrets.JWT_SECRET }}' >> .env
            echo 'ENCRYPTION_KEY=${{ secrets.ENCRYPTION_KEY }}' >> .env
            echo 'OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}' >> .env
            echo 'NODE_ENV=production' >> .env


            echo '[•] Logging into GitHub Container Registry...'
            echo '${{ secrets.GH_TOKEN }}' | docker login ghcr.io -u ${{ github.actor }} --password-stdin


            echo '[•] Pulling docker images...'
            docker compose -f docker-compose.$targetEnvironment.yml pull


            echo '[•] Restarting service: tonmate-$targetEnvironment'
            docker compose -f docker-compose.$targetEnvironment.yml up -d --build --force-recreate tonmate-$targetEnvironment

            echo '[•] Cleaning up...'
            cd ~ && rm -rf $DEPLOY_DIR

            echo '[✓] Deployment finished successfully!'
          "
