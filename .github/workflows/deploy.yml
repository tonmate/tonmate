name: Deploy Tonmate

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '20.x'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    
    env:
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
      NEXTAUTH_URL: ${{ vars.NEXTAUTH_URL }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      ENCRYPTION_KEY: ${{ secrets.ENCRYPTION_KEY }}
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Setup test environment
      run: |
        cp environment.example .env.local
        echo "DATABASE_URL=$DATABASE_URL" >> .env.local
        echo "NEXTAUTH_SECRET=$NEXTAUTH_SECRET" >> .env.local
        echo "NEXTAUTH_URL=$NEXTAUTH_URL" >> .env.local
        echo "OPENAI_API_KEY=$OPENAI_API_KEY" >> .env.local
        echo "JWT_SECRET=$JWT_SECRET" >> .env.local
        echo "ENCRYPTION_KEY=$ENCRYPTION_KEY" >> .env.local

    - name: Generate Prisma client
      run: npm run db:generate

    - name: Push database schema
      run: npm run db:push

    - name: Run linting
      run: npm run lint

    - name: Run type checking
      run: npm run type-check

    - name: Build application
      run: npm run build

    - name: Run tests
      run: npm test

    - name: Validate environment
      run: npm run validate:env

    - name: Security audit
      run: npm run security:audit

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix=sha-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    environment:
      name: staging
      url: https://staging.your-domain.com

    steps:
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here
        # Example: SSH to staging server and pull latest image
        # ssh user@staging-server "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest && cd docker && docker-compose up -d"

  deploy-production:
    needs: deploy-staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    environment:
      name: production
      url: https://your-domain.com

    steps:
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here
        # Example: SSH to production server and pull latest image
        # ssh user@production-server "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest && cd docker && docker-compose up -d"

  health-check:
    needs: [deploy-staging, deploy-production]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Check staging health
      if: needs.deploy-staging.result == 'success'
      run: |
        for i in {1..10}; do
          if curl -f https://staging.your-domain.com/api/health; then
            echo "Staging health check passed"
            break
          fi
          echo "Staging health check attempt $i failed, retrying..."
          sleep 30
        done

    - name: Check production health
      if: needs.deploy-production.result == 'success'
      run: |
        for i in {1..10}; do
          if curl -f https://your-domain.com/api/health; then
            echo "Production health check passed"
            break
          fi
          echo "Production health check attempt $i failed, retrying..."
          sleep 30
        done

    - name: Notify deployment status
      if: always()
      run: |
        if [ "${{ needs.deploy-production.result }}" == "success" ]; then
          echo " Production deployment successful"
        else
          echo " Production deployment failed"
          exit 1
        fi
