version: '3.8'

# ===========================================
# TONMATE - FULL PRODUCTION DOCKER COMPOSE
# ===========================================
# This file contains the complete setup with all optional services.
# For a minimal setup, use docker-compose.minimal.yml instead.

services:
  # === REQUIRED SERVICES ===
  
  # Tonmate AI Customer Support Platform
  app:
    build: .
    container_name: tonmate-app
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/tonmate
      - NEXTAUTH_URL=http://localhost:3000
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - LOG_LEVEL=info
      - RATE_LIMIT_ENABLED=true
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./uploads:/app/uploads
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # === REQUIRED SERVICES ===
  
  # PostgreSQL Database (REQUIRED)
  db:
    image: postgres:15-alpine
    container_name: tonmate-db
    environment:
      - POSTGRES_DB=tonmate
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # === OPTIONAL SERVICES ===
  
  # Redis Cache (OPTIONAL - Used for caching and session storage)
  redis:
    image: redis:7-alpine
    container_name: tonmate-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy (OPTIONAL - For production deployments)
  nginx:
    image: nginx:alpine
    container_name: customer-support-ai-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    networks:
      - app-network
    restart: unless-stopped

# === VOLUMES AND NETWORKS ===

# Volumes
volumes:
  postgres_data:  # REQUIRED - PostgreSQL data
  redis_data:     # OPTIONAL - Redis data

# Networks
networks:
  app-network:
    driver: bridge
