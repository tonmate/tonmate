// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
  
  // User configuration
  openaiApiKey      String?   // Encrypted
  openaiModel       String?   @default("gpt-3.5-turbo")
  defaultTemperature Float?   @default(0.7)
  defaultMaxTokens  Int?      @default(1000)
  
  // Additional LLM providers
  anthropicApiKey   String?   // Encrypted
  anthropicModel    String?   @default("claude-3-sonnet-20240229")
  cohereApiKey      String?   // Encrypted
  huggingFaceApiKey String?   // Encrypted
  
  // Integration settings
  webhookUrl        String?
  webhookSecret     String?   // Encrypted
  
  // User's agents
  agents        Agent[]
  
  // API Keys
  apiKeys       ApiKey[]
  
  // Web crawling
  crawlRequests CrawlRequest[]
  knowledgeBases KnowledgeBase[]
  
  // Model configurations
  modelConfigurations ModelConfiguration[]
  
  // Crawler configuration
  crawlerConfiguration CrawlerConfiguration?
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Agent {
  id              String   @id @default(cuid())
  userId          String
  name            String
  description     String?
  prompt          String   @default("You are a helpful customer support agent.")
  greeting        String   @default("Hello! How can I help you today?")
  temperature     Float    @default(0.7)
  llmProvider     String   @default("openai")
  model           String   @default("gpt-4")
  maxTokens       Int      @default(2000)
  settings        String?  // JSON string for additional settings
  isActive        Boolean  @default(true)
  
  // Relations
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  knowledgeSources KnowledgeSource[]
  conversations   Conversation[]
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model KnowledgeSource {
  id              String   @id @default(cuid())
  agentId         String
  type            String   // "website", "document", "faq", "manual"
  name            String
  url             String?  // For website crawling
  content         String?  // Raw content for documents
  metadata        Json?    // Additional structured data
  status          String   @default("pending") // "pending", "processing", "completed", "failed"
  
  // Relations
  agent           Agent     @relation(fields: [agentId], references: [id], onDelete: Cascade)
  documents       Document[]
  processingLogs  ProcessingLog[]
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Document {
  id              String   @id @default(cuid())
  sourceId        String
  title           String
  content         String
  url             String?  // Original URL if from web crawling
  wordCount       Int?
  embedding       String?  @default("null") // Vector embeddings for semantic search (JSON as string)
  htmlContent     String?  // Structured content in HTML/Markdown format
  metadata        String?  // Additional metadata as JSON string (content type, extraction info, etc.)
  
  // Relations
  source          KnowledgeSource @relation(fields: [sourceId], references: [id], onDelete: Cascade)
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Conversation {
  id              String   @id @default(cuid())
  agentId         String
  sessionId       String   @unique
  messages        Json     // Array of message history
  metadata        Json?    // Channel info, user info, etc.
  
  // Relations
  agent           Agent    @relation(fields: [agentId], references: [id], onDelete: Cascade)
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model ProcessingLog {
  id              String   @id @default(cuid())
  knowledgeSourceId String
  level           String   // "info", "warning", "error", "success"
  message         String
  details         Json?    // Additional structured data
  url             String?  // Related URL if applicable
  step            String?  // Processing step: "started", "link_found", "page_crawled", "embedding_generated", "completed", "failed"
  progress        Float?   // Progress percentage (0-100)
  
  // Relations
  knowledgeSource KnowledgeSource @relation(fields: [knowledgeSourceId], references: [id], onDelete: Cascade)
  
  createdAt       DateTime @default(now())
}

model ApiKey {
  id        String   @id @default(cuid())
  key       String   @unique
  name      String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lastUsed  DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Web Crawling Models
model CrawlRequest {
  id              String   @id @default(cuid())
  userId          String
  url             String
  status          String   @default("pending") // "pending", "running", "completed", "failed", "stopped"
  progress        Float    @default(0)
  totalPages      Int      @default(0)
  completedPages  Int      @default(0)
  error           String?
  
  // Crawl Options
  maxDepth        Int      @default(2)
  pageLimit       Int      @default(50)
  allowedDomains  String   @default("[]")
  excludePaths    String   @default("[]")
  includePaths    String   @default("[]")
  respectRobotsTxt Boolean @default(true)
  delayBetweenRequests Int @default(1000)
  
  // Page Options
  excludeTags     String   @default("[]")
  includeTags     String   @default("[]")
  waitTime        Int      @default(0)
  includeHtml     Boolean  @default(false)
  onlyMainContent Boolean  @default(true)
  includeLinks    Boolean  @default(false)
  timeout         Int      @default(15000)
  extraHeaders    String   @default("{}")
  
  // Relations
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  pages           CrawledPage[]
  knowledgeBases  KnowledgeBase[]
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  completedAt     DateTime?
}

model CrawledPage {
  id              String   @id @default(cuid())
  crawlRequestId  String
  url             String
  title           String
  content         String
  htmlContent     String?
  metadata        String   @default("{}")
  links           String   @default("[]")
  depth           Int
  status          String   @default("success") // "success", "failed"
  error           String?
  
  // Relations
  crawlRequest    CrawlRequest     @relation(fields: [crawlRequestId], references: [id], onDelete: Cascade)
  knowledgeChunks KnowledgeChunk[]
  
  createdAt       DateTime @default(now())
}

model KnowledgeBase {
  id              String   @id @default(cuid())
  userId          String
  name            String
  description     String?
  crawlRequestId  String
  vectorized      Boolean  @default(false)
  totalChunks     Int      @default(0)
  
  // Relations
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  crawlRequest    CrawlRequest     @relation(fields: [crawlRequestId], references: [id], onDelete: Cascade)
  chunks          KnowledgeChunk[]
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model KnowledgeChunk {
  id              String   @id @default(cuid())
  knowledgeBaseId String
  pageId          String
  content         String
  metadata        String   @default("{}")
  embedding       String?  // Vector embedding for semantic search
  chunkIndex      Int
  
  // Relations
  knowledgeBase   KnowledgeBase @relation(fields: [knowledgeBaseId], references: [id], onDelete: Cascade)
  page            CrawledPage   @relation(fields: [pageId], references: [id], onDelete: Cascade)
  
  createdAt       DateTime @default(now())
}

// Model Configuration for AI Providers
model ModelConfiguration {
  id              String   @id @default(cuid())
  userId          String
  providerId      String   // "openai", "anthropic", "google", "mistral", "cohere"
  apiKey          String   // Encrypted
  defaultModel    String
  temperature     Float    @default(0.7)
  maxTokens       Int      @default(2000)
  topP            Float    @default(0.9)
  frequencyPenalty Float   @default(0)
  presencePenalty Float    @default(0)
  isActive        Boolean  @default(true)
  
  // Relations
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@unique([userId, providerId])
}

// Crawler Configuration
model CrawlerConfiguration {
  id              String   @id @default(cuid())
  userId          String   @unique
  
  // General settings
  maxPages        Int      @default(10)
  maxDepth        Int      @default(3)
  crawlDelay      Int      @default(1000)
  userAgent       String   @default("AI-Support-Agent/1.0")
  
  // Performance settings
  concurrency     Int      @default(3)
  timeout         Int      @default(30000)
  retryAttempts   Int      @default(3)
  maxFileSize     Int      @default(10485760) // 10MB
  
  // Filters
  respectRobotsTxt Boolean @default(true)
  followRedirects Boolean  @default(true)
  includePatterns String   @default("[\"*\"]")
  excludePatterns String   @default("[\"/admin/*\", \"/login/*\", \"/private/*\"]")
  allowedFileTypes String  @default("[\"html\", \"htm\", \"php\", \"asp\", \"aspx\", \"jsp\"]")
  customHeaders   String   @default("{}")
  
  // Advanced settings
  enableJavaScript Boolean @default(false)
  waitForSelector String   @default("")
  maxConcurrentRequests Int @default(5)
  requestInterval Int      @default(2000)
  skipDuplicates  Boolean  @default(true)
  extractImages   Boolean  @default(false)
  extractLinks    Boolean  @default(true)
  extractText     Boolean  @default(true)
  extractMetadata Boolean  @default(true)
  
  // Enhanced content extraction
  extractFullContent Boolean @default(true)
  preserveFormatting Boolean @default(true)
  extractTables     Boolean @default(true)
  extractCodeBlocks Boolean @default(true)
  
  // Relations
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}
