// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
  
  // User configuration
  openaiApiKey      String?   // Encrypted
  openaiModel       String?   @default("gpt-3.5-turbo")
  defaultTemperature Float?   @default(0.7)
  defaultMaxTokens  Int?      @default(1000)
  
  // Additional LLM providers
  anthropicApiKey   String?   // Encrypted
  anthropicModel    String?   @default("claude-3-sonnet-20240229")
  cohereApiKey      String?   // Encrypted
  huggingFaceApiKey String?   // Encrypted
  
  // Integration settings
  webhookUrl        String?
  webhookSecret     String?   // Encrypted
  
  // User's agents
  agents        Agent[]
  
  // API Keys
  apiKeys       ApiKey[]
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Agent {
  id              String   @id @default(cuid())
  userId          String
  name            String
  description     String?
  prompt          String   @default("You are a helpful customer support agent.")
  greeting        String   @default("Hello! How can I help you today?")
  temperature     Float    @default(0.7)
  llmProvider     String   @default("openai")
  isActive        Boolean  @default(true)
  
  // Relations
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  knowledgeSources KnowledgeSource[]
  conversations   Conversation[]
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model KnowledgeSource {
  id              String   @id @default(cuid())
  agentId         String
  type            String   // "website", "document", "faq", "manual"
  name            String
  url             String?  // For website crawling
  content         String?  // Raw content for documents
  metadata        Json?    // Additional structured data
  status          String   @default("pending") // "pending", "processing", "completed", "failed"
  
  // Relations
  agent           Agent     @relation(fields: [agentId], references: [id], onDelete: Cascade)
  documents       Document[]
  processingLogs  ProcessingLog[]
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Document {
  id              String   @id @default(cuid())
  sourceId        String
  title           String
  content         String
  url             String?  // Original URL if from web crawling
  wordCount       Int?
  embedding       Json?    // Vector embeddings for semantic search
  
  // Relations
  source          KnowledgeSource @relation(fields: [sourceId], references: [id], onDelete: Cascade)
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Conversation {
  id              String   @id @default(cuid())
  agentId         String
  sessionId       String   @unique
  messages        Json     // Array of message history
  metadata        Json?    // Channel info, user info, etc.
  
  // Relations
  agent           Agent    @relation(fields: [agentId], references: [id], onDelete: Cascade)
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model ProcessingLog {
  id              String   @id @default(cuid())
  knowledgeSourceId String
  level           String   // "info", "warning", "error", "success"
  message         String
  details         Json?    // Additional structured data
  url             String?  // Related URL if applicable
  step            String?  // Processing step: "started", "link_found", "page_crawled", "embedding_generated", "completed", "failed"
  progress        Float?   // Progress percentage (0-100)
  
  // Relations
  knowledgeSource KnowledgeSource @relation(fields: [knowledgeSourceId], references: [id], onDelete: Cascade)
  
  createdAt       DateTime @default(now())
}

model ApiKey {
  id        String   @id @default(cuid())
  key       String   @unique
  name      String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lastUsed  DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
